<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Adoption Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous"> 
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.9.2/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.9.2/mapbox-gl.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  </head>
<body>
<%- include('../navbar.ejs') %>

<div id="map" style="width: 100%; height: 400px">
  <script>
    mapboxgl.accessToken='pk.eyJ1Ijoic3Vtby0xMjM0NSIsImEiOiJjbDU5YzI3angwdnloM21sZmdxZzU5eG4xIn0.jwBK20ijDrHD-p5lUdLzKA';
  const map = new mapboxgl.Map({
  container: 'map',
  style: 'mapbox://styles/mapbox/dark-v10',
  center: [72.8333, 18.9667],
  zoom: 8
  });
   
  map.on('load', () => {
  // Add a new source from our GeoJSON data and
  // set the 'cluster' option to true. GL-JS will
  // add the point_count property to your source data.
  map.addSource('pet_map', {
  type: 'geojson',
  // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
  // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
  data:
  {
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.84313201904297,
          19.073150403129603
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.82527923583984,
          19.130572530019965
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.86510467529297,
          19.12505827595722
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.87334442138672,
          19.113704820498107
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.84038543701172,
          19.118570682619858
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.8668212890625,
          19.05984639127821
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.9001235961914,
          19.039726102199655
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.84690856933594,
          19.186029192399957
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.85446166992188,
          19.152952023808638
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.93136596679688,
          19.184083660401953
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.88192749023438,
          19.257997699830604
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.91900634765625,
          19.228176737766262
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.95059204101562,
          19.139978773834496
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          72.81463623046875,
          19.265776189877485
        ]
      }
    }
  ]
},
  cluster: true,
  clusterMaxZoom: 14, // Max zoom to cluster points on
  clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
  });
   
  map.addLayer({
  id: 'clusters',
  type: 'circle',
  source: 'pet_map',
  filter: ['has', 'point_count'],
  paint: {
  // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
  // with three steps to implement three types of circles:
  //   * Blue, 20px circles when point count is less than 100
  //   * Yellow, 30px circles when point count is between 100 and 750
  //   * Pink, 40px circles when point count is greater than or equal to 750
  'circle-color': [
  'step',
  ['get', 'point_count'],
  '#51bbd6',
  100,
  '#f1f075',
  750,
  '#f28cb1'
  ],
  'circle-radius': [
  'step',
  ['get', 'point_count'],
  20,
  100,
  30,
  750,
  40
  ]
  }
  });
   
  map.addLayer({
  id: 'cluster-count',
  type: 'symbol',
  source: 'pet_map',
  filter: ['has', 'point_count'],
  layout: {
  'text-field': '{point_count_abbreviated}',
  'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
  'text-size': 12
  }
  });
   
  map.addLayer({
  id: 'unclustered-point',
  type: 'circle',
  source: 'pet_map',
  filter: ['!', ['has', 'point_count']],
  paint: {
  'circle-color': '#11b4da',
  'circle-radius': 4,
  'circle-stroke-width': 1,
  'circle-stroke-color': '#fff'
  }
  });
   
  // inspect a cluster on click
  map.on('click', 'clusters', (e) => {
  const features = map.queryRenderedFeatures(e.point, {
  layers: ['clusters']
  });
  const clusterId = features[0].properties.cluster_id;
  map.getSource('pet_map').getClusterExpansionZoom(
  clusterId,
  (err, zoom) => {
  if (err) return;
   
  map.easeTo({
  center: features[0].geometry.coordinates,
  zoom: zoom
  });
  }
  );
  });
   
  // When a click event occurs on a feature in
  // the unclustered-point layer, open a popup at
  // the location of the feature, with
  // description HTML from its properties.
  map.on('click', 'unclustered-point', (e) => {
  const coordinates = e.features[0].geometry.coordinates.slice();
  const mag = e.features[0].properties.mag;
  const tsunami =
  e.features[0].properties.tsunami === 1 ? 'yes' : 'no';
   
  // Ensure that if the map is zoomed out such that
  // multiple copies of the feature are visible, the
  // popup appears over the copy being pointed to.
  while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
  coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
  }
   
  new mapboxgl.Popup()
  .setLngLat(coordinates)
  .setHTML(
  `magnitude: Available`
  )
  .addTo(map);
  });
   
  map.on('mouseenter', 'clusters', () => {
  map.getCanvas().style.cursor = 'pointer';
  });
  map.on('mouseleave', 'clusters', () => {
  map.getCanvas().style.cursor = '';
  });
  });
  </script>
</div>

<div class="col mt-4 pb-4 d-flex justify-content-center" style="border-bottom: 1px solid gray ;">
  <a class="btn btn-primary " href="/adopt/new" role="button">Add a Pet for Adoption</a>
</div>
<!-- form with action /search and method post

 -->
 


<div class="d-flex justify-content-center">
  <h2 class="my-2">All Pets</h2>
</div>

<div class="d-flex justify-content-center">
<form action="/search" method="post" >
  <div class="input-group col">
    <div class="form-outline">
      <input type="search" id="form1" class="form-control" name="location" placeholder="Search By Location" />
      <!-- <label class="form-label" for="form1">Search</label> -->
    </div>
    <button type="submit" class="btn btn-primary col">
      <i class="fas fa-search"></i>
    </button>
  </div>
</form>
</div>

 <!--  Cards Start -->
<%for(let p of pet){%>
  <div>
    <div class="d-flex justify-content-center " >
        <div class="">
            <div
                class="container row g-0 border rounded overflow-hidden flex-md-row mb-4 mt-4 shadow-sm h-md-300 col align-self-center">
                <div class="col-auto d-none d-lg-block">
                  
                    <img src="<%=p.images%>"  height="250" width="300" class="py-1"/>
                      <text x="50%" y="50%" fill="#eceeef" dy=".3em"></text>
            </div>
                <div class="col p-1 ml-5 d-flex flex-column col-md-6  align-self-center">
                    <h3 class="mb-1" style="font-size: x-large;">Location: <%=p.location%> </h3>
                    <p class="card-text mb-1" style="font-size: large;">Name : <%=p.name%></p>
                    <p class="card-text mb-1" style="font-size: large;">Breed : <%=p.breed%></p>
                    <p class="card-text mb-1" style="font-size: large;">Age : <%=p.age%></p>
                    <p class="card-text mb-1" style="font-size: large;">Details : <%=p.description%></p>
                    <p class="card-text mb-1" style="font-size: large;">Posted By : <%=p.author.name%></p>

                    
                      <form action="/adopt/contact" method="post">
                      <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                        <button class="btn btn-primary <%if(p.author.email===user){%>disabled<%}%>" style=" font-size: large; width: 150px; margin-left: 13px; font-weight: 500;" type="submit">Adopt</button>
                        <input type='hidden' name='location' value='<%=p.location%>' />
                        <input type='hidden' name='name' value='<%=p.name%>' />
                        <input type='hidden' name='breed' value='<%=p.breed%>' />
                        <input type='hidden' name='age' value='<%=p.age%>' />
                      </form> 
                      
                      <%if(p.author.email!==user){%>
                      <form action="/contact" method="get">
                      <button class="btn btn-primary" style=" font-size: large; width: 150px; margin-left: 13px; font-weight: 500;" type="submit">Contact</button>
                      <input type='hidden' name='author' value='<%=p.author.email%>' />
                      </form> <%}%>
                    
                      
                      <%if(p.author.email===user){%>
                          <form action="/delete" method="post">
                            <button class="btn btn-danger" style=" font-size: large; width: 150px; margin-left: 13px; font-weight: 500;" type="submit">Delete</button>
                            <input type='hidden' name='unique' value='<%=p._id%>' />
                      </form><%}%>
                      
                       
                    </div>
                </div>

            </div>
        </div>

    </div>
<%}%>

<!-- Card Ends -->




<!-- <script src="public/js/clusterMap.js"></script> -->

<%- include('../footer.ejs') %> 

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" crossorigin="anonymous"></script>
<script>
  const mapToken = '<%-process.env.MAPBOX_TOKEN%>';
  // const pets = {features: <%-JSON.stringify(pet) %>}
</script>
</body>
</html>
